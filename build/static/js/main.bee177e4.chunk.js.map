{"version":3,"sources":["textInput.tsx","proxy.ts","eventProducer.ts","Login.tsx","textInputAndButton.tsx","conversationCard.tsx","leftpane.tsx","messageCard.tsx","rightPane.tsx","main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TextInput","state","value","props","focus","this","setState","attrs","autofocus","autoFocus","onEnter","onKeyDown","e","keyCode","className","type","onChange","target","onBlur","onFocus","placeholder","Component","proxy","ws","inbox","WebSocket","addEventListener","p","JSON","parse","data","alert","message","console","log","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","send","stringify","listeners","listener","obj","splice","findIndex","Error","filter","args","call","Login","email","password","displayName","register","src","width","checkNeptun","onClick","href","preventDefault","sendPacket","staySignedIn","input","toUpperCase","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleTimeString","content","LeftPane","c","forceUpdate","removeAllEventListener","firstMessage","user","tag","text","sendContactRequest","map","key","selectedConversation","MessageCard","own","PureComponent","RightPane","onBack","id","senderId","onSend","m","referenceTo","contentType","Main","undefined","App","showLoggedIn","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bee177e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./textInput.css\"\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>{\r\n    state = { value: this.props.value, focus: false };\r\n    componentWillReceiveProps({ value }) {\r\n        this.setState({ ...this.state, value })\r\n    }\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { MessageDto, InboxDto, IncomingPacket, OutgoingPacket } from \"./chat\";\r\nimport { EventProducer } from \"./eventProducer\";\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap> {\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    console.log(\"switch: error\");\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\nexport var proxy = new Proxy();\r\n","export class EventProducer<M>\r\n{\r\n    private listeners: { type: keyof M, listener: any, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[ K ] )\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n    removeAllEventListener( obj: Object )\r\n    {\r\n        if ( !obj )\r\n            throw new Error( \"Must specify object\" );\r\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n    protected dispatch<K extends keyof M>( type: K, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n            listener.listener.call( listener.obj, ...args );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { TextInput } from './textInput';\r\nimport { proxy } from './proxy';\r\n\r\n\r\nexport class Login extends Component {\r\n    [x: string]: any;\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                    onChange={e => this.checkNeptun(e)} onEnter={() => this.onClick()} autofocus={true} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onEnter={() => this.onClick()} onChange={e => this.setState({ password: e })} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onEnter={() => this.onClick()} onChange={e => this.setState({ displayName: e })} />}\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n\r\n    }\r\n\r\n    checkNeptun(input: string) {\r\n        if (input.toUpperCase() === \"JIZHGH\") {\r\n            this.setState({ displayName: \"HDani\" });\r\n        }\r\n        this.setState({ email: input });\r\n    }\r\n}\r\n","import { TextInputOptions, TextInput } from \"./textInput\"\r\nimport React, { Component } from \"react\";\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props}  ref={ this.textInput } onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport React from \"react\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n}","import { TextInputAndButton } from \"./textInputAndButton\";\r\nimport React, { Component } from \"react\";\r\nimport { ConversationCard } from \"./conversationCard\";\r\nimport { InboxDto, ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./proxy\";\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\" buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport { TextInputAndButton } from \"./textInputAndButton\";\r\nimport { MessageCard } from \"./messageCard\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./proxy\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\" onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x} own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\" buttonContent=\"Send\"\r\n                                onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: text });\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport React from \"react\";\r\nimport { LeftPane } from \"./leftpane\";\r\nimport { RightPane } from \"./rightPane\";\r\nimport { proxy } from \"./proxy\";\r\n\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './chat.d';\nimport { Login } from './Login'\nimport { proxy } from './proxy';\nimport { Main } from './main';\n\nexport default class App extends Component {\n  state = { showLoggedIn: true  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        { this.state.showLoggedIn? <Login /> : <Main /> }\n      </div>\n    );\n  }\n\n  componentDidMount()\n  {\n    proxy.addEventListener( \"login\", () => { this.setState( { showLoggedIn: false } ) } );\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}